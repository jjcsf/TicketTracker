FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies for build
RUN npm ci

# Copy source code
COPY . .

# Build the React frontend
RUN npm run build

# Production stage
FROM node:20-alpine

WORKDIR /app

# Install PostgreSQL client and production dependencies
RUN apk add --no-cache postgresql-client
RUN echo '{"name":"ticket-management","version":"1.0.0","dependencies":{"express":"^4.18.2","pg":"^8.11.3","cors":"^2.8.5"}}' > package.json
RUN npm install

# Copy built frontend from builder stage
COPY --from=builder /app/client/dist ./client/dist

# Copy server files
COPY server/ ./server/
COPY shared/ ./shared/

# Create the complete server with all APIs
RUN cat > server/container-start.js << 'EOF'
const express = require('express');
const path = require('path');
const cors = require('cors');
const { Pool } = require('pg');

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Database connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:ticketpass123@postgres:5432/ticket_management'
});

// Initialize database with full schema
async function initDatabase() {
  try {
    await pool.query(`
      -- Users table (for authentication)
      CREATE TABLE IF NOT EXISTS users (
        id VARCHAR PRIMARY KEY,
        email VARCHAR UNIQUE,
        first_name VARCHAR,
        last_name VARCHAR,
        profile_image_url VARCHAR,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );

      -- Sessions table (required for auth)
      CREATE TABLE IF NOT EXISTS sessions (
        sid VARCHAR PRIMARY KEY,
        sess JSONB NOT NULL,
        expire TIMESTAMP NOT NULL
      );

      -- Teams table
      CREATE TABLE IF NOT EXISTS teams (
        id SERIAL PRIMARY KEY,
        name VARCHAR NOT NULL,
        city VARCHAR,
        league VARCHAR,
        created_at TIMESTAMP DEFAULT NOW()
      );

      -- Seasons table
      CREATE TABLE IF NOT EXISTS seasons (
        id SERIAL PRIMARY KEY,
        team_id INTEGER REFERENCES teams(id),
        year INTEGER NOT NULL,
        name VARCHAR,
        start_date DATE,
        end_date DATE,
        created_at TIMESTAMP DEFAULT NOW()
      );

      -- Games table
      CREATE TABLE IF NOT EXISTS games (
        id SERIAL PRIMARY KEY,
        season_id INTEGER REFERENCES seasons(id),
        opponent VARCHAR NOT NULL,
        date DATE NOT NULL,
        time TIME,
        is_home BOOLEAN DEFAULT true,
        is_playoff BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT NOW()
      );

      -- Ticket holders table
      CREATE TABLE IF NOT EXISTS ticket_holders (
        id SERIAL PRIMARY KEY,
        name VARCHAR NOT NULL,
        email VARCHAR UNIQUE,
        phone VARCHAR,
        created_at TIMESTAMP DEFAULT NOW()
      );

      -- Seats table
      CREATE TABLE IF NOT EXISTS seats (
        id SERIAL PRIMARY KEY,
        team_id INTEGER REFERENCES teams(id),
        section VARCHAR NOT NULL,
        row VARCHAR NOT NULL,
        number VARCHAR NOT NULL,
        license_cost DECIMAL(10,2) DEFAULT 0,
        created_at TIMESTAMP DEFAULT NOW()
      );

      -- Seat ownership table
      CREATE TABLE IF NOT EXISTS seat_ownership (
        id SERIAL PRIMARY KEY,
        seat_id INTEGER REFERENCES seats(id),
        season_id INTEGER REFERENCES seasons(id),
        ticket_holder_id INTEGER REFERENCES ticket_holders(id),
        created_at TIMESTAMP DEFAULT NOW()
      );

      -- Payments table
      CREATE TABLE IF NOT EXISTS payments (
        id SERIAL PRIMARY KEY,
        ticket_holder_id INTEGER REFERENCES ticket_holders(id),
        season_id INTEGER REFERENCES seasons(id),
        amount DECIMAL(10,2) NOT NULL,
        payment_date DATE DEFAULT CURRENT_DATE,
        description VARCHAR,
        created_at TIMESTAMP DEFAULT NOW()
      );

      -- Game pricing table
      CREATE TABLE IF NOT EXISTS game_pricing (
        id SERIAL PRIMARY KEY,
        game_id INTEGER REFERENCES games(id),
        seat_id INTEGER REFERENCES seats(id),
        cost DECIMAL(10,2) NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );

      -- Game attendance table
      CREATE TABLE IF NOT EXISTS game_attendance (
        id SERIAL PRIMARY KEY,
        ticket_holder_id INTEGER REFERENCES ticket_holders(id),
        seat_id INTEGER REFERENCES seats(id),
        game_id INTEGER REFERENCES games(id),
        attended BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT NOW()
      );

      -- Insert sample data
      INSERT INTO teams (name, city, league) VALUES 
        ('49ers', 'San Francisco', 'NFL'),
        ('Giants', 'San Francisco', 'MLB')
      ON CONFLICT DO NOTHING;

      INSERT INTO ticket_holders (name, email, phone) VALUES 
        ('Container Admin', 'admin@container.local', '555-0100'),
        ('John Smith', 'john@example.com', '555-0101'),
        ('Jane Doe', 'jane@example.com', '555-0102')
      ON CONFLICT DO NOTHING;

      INSERT INTO seasons (team_id, year, name) VALUES 
        (1, 2024, '2024 Season'),
        (1, 2025, '2025 Season')
      ON CONFLICT DO NOTHING;

      INSERT INTO seats (team_id, section, row, number, license_cost) VALUES 
        (1, '119', '1', '1', 9996.39),
        (1, '119', '1', '2', 9996.39),
        (1, '119', '1', '3', 9996.39),
        (1, '119', '1', '4', 0.00)
      ON CONFLICT DO NOTHING;
    `);
    console.log('Database tables initialized successfully');
  } catch (error) {
    console.error('Database initialization error:', error);
  }
}

// Logging middleware
app.use((req, res, next) => {
  const start = Date.now();
  res.on('finish', () => {
    const duration = Date.now() - start;
    if (req.path.startsWith('/api')) {
      console.log(`${new Date().toLocaleTimeString()} [express] ${req.method} ${req.path} ${res.statusCode} in ${duration}ms`);
    }
  });
  next();
});

// Authentication bypass for container deployment
app.get('/api/auth/user', (req, res) => {
  res.json({
    id: 'container-admin',
    email: 'admin@container.local',
    firstName: 'Container',
    lastName: 'Admin'
  });
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', message: 'Container deployment with full database' });
});

// Teams API
app.get('/api/teams', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM teams ORDER BY created_at DESC');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch teams' });
  }
});

app.post('/api/teams', async (req, res) => {
  try {
    const { name, city, league } = req.body;
    const result = await pool.query(
      'INSERT INTO teams (name, city, league) VALUES ($1, $2, $3) RETURNING *',
      [name, city, league]
    );
    res.json(result.rows[0]);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create team' });
  }
});

// Seasons API
app.get('/api/seasons', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT s.*, t.name as team_name 
      FROM seasons s 
      LEFT JOIN teams t ON s.team_id = t.id 
      ORDER BY s.year DESC
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch seasons' });
  }
});

app.post('/api/seasons', async (req, res) => {
  try {
    const { teamId, year, name } = req.body;
    const result = await pool.query(
      'INSERT INTO seasons (team_id, year, name) VALUES ($1, $2, $3) RETURNING *',
      [teamId, year, name]
    );
    res.json(result.rows[0]);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create season' });
  }
});

// Games API
app.get('/api/games', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT g.*, s.year as season_year, t.name as team_name
      FROM games g
      LEFT JOIN seasons s ON g.season_id = s.id
      LEFT JOIN teams t ON s.team_id = t.id
      ORDER BY g.date DESC
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch games' });
  }
});

// Ticket holders API
app.get('/api/ticket-holders', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM ticket_holders ORDER BY name');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch ticket holders' });
  }
});

// Seats API
app.get('/api/seats', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT s.*, t.name as team_name
      FROM seats s
      LEFT JOIN teams t ON s.team_id = t.id
      ORDER BY s.section, s.row, s.number
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch seats' });
  }
});

// Seat ownership API
app.get('/api/seat-ownership', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT so.*, s.section, s.row, s.number, th.name as ticket_holder_name
      FROM seat_ownership so
      LEFT JOIN seats s ON so.seat_id = s.id
      LEFT JOIN ticket_holders th ON so.ticket_holder_id = th.id
      ORDER BY s.section, s.row, s.number
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch seat ownership' });
  }
});

// Game pricing API
app.get('/api/game-pricing', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT gp.*, g.opponent, g.date, s.section, s.row, s.number
      FROM game_pricing gp
      LEFT JOIN games g ON gp.game_id = g.id
      LEFT JOIN seats s ON gp.seat_id = s.id
      ORDER BY g.date DESC
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch game pricing' });
  }
});

// Game attendance API
app.get('/api/game-attendance', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT ga.*, g.opponent, g.date, th.name as ticket_holder_name, s.section, s.row, s.number
      FROM game_attendance ga
      LEFT JOIN games g ON ga.game_id = g.id
      LEFT JOIN ticket_holders th ON ga.ticket_holder_id = th.id
      LEFT JOIN seats s ON ga.seat_id = s.id
      ORDER BY g.date DESC
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch game attendance' });
  }
});

// Transfers API
app.get('/api/transfers', async (req, res) => {
  try {
    res.json([]); // Empty for now
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch transfers' });
  }
});

// Dashboard stats API
app.get('/api/dashboard/stats/:seasonId', async (req, res) => {
  try {
    const { seasonId } = req.params;
    
    const stats = {
      totalRevenue: '0.00',
      totalCosts: '0.00',
      totalProfit: '0.00',
      gamesPlayed: 0,
      totalGames: 0,
      activeSeats: 0,
      ticketHolders: 0
    };

    // Get basic counts
    const gameCount = await pool.query('SELECT COUNT(*) FROM games WHERE season_id = $1', [seasonId]);
    const seatCount = await pool.query('SELECT COUNT(*) FROM seat_ownership WHERE season_id = $1', [seasonId]);
    const holderCount = await pool.query('SELECT COUNT(DISTINCT ticket_holder_id) FROM seat_ownership WHERE season_id = $1', [seasonId]);

    stats.totalGames = parseInt(gameCount.rows[0].count);
    stats.activeSeats = parseInt(seatCount.rows[0].count);
    stats.ticketHolders = parseInt(holderCount.rows[0].count);

    res.json(stats);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch dashboard stats' });
  }
});

// Serve static files
const clientDistPath = path.resolve('client/dist');
app.use(express.static(clientDistPath));

// SPA catch-all
app.get('*', (req, res) => {
  const indexPath = path.join(clientDistPath, 'index.html');
  res.sendFile(indexPath, (err) => {
    if (err) {
      res.status(500).send('Frontend build not found');
    }
  });
});

const port = 5000;
app.listen(port, '0.0.0.0', async () => {
  console.log(`Container server running on port ${port}`);
  console.log(`Access application at http://your-nas-ip:8080`);
  await initDatabase();
});
EOF

EXPOSE 5000
ENV NODE_ENV=production
CMD ["node", "server/container-start.js"]