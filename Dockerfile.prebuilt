FROM node:20-alpine AS builder

# Install git and build tools
RUN apk add --no-cache git

WORKDIR /app

# Clone the repository
RUN git clone https://github.com/jjcsf/TicketTracker.git .

# Install dependencies and build
RUN npm ci --only=production
RUN npm run build

FROM node:20-alpine AS runtime

# Install runtime dependencies
RUN apk add --no-cache git
RUN npm install -g pg@^8.11.3 cors@^2.8.5

WORKDIR /app

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/container-interactive-server.js ./
COPY --from=builder /app/package.json ./

# Create optimized server for pre-built image
RUN cat > server.js << 'EOF'
const express = require('express');
const path = require('path');
const cors = require('cors');
const { Pool } = require('pg');

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Database connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:ticketpass123@postgres:5432/ticket_management',
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// Container admin bypass
const containerAdmin = {
  id: 'container-admin',
  email: 'cale.john@gmail.com',
  firstName: 'Container',
  lastName: 'Admin'
};

// Initialize database with retry logic
async function initDatabase() {
  let retries = 10;
  while (retries > 0) {
    try {
      await pool.query('SELECT 1');
      console.log('✓ Database connection established');
      break;
    } catch (error) {
      console.log(`⏳ Database connection failed, retrying... (${retries} attempts left)`);
      retries--;
      if (retries === 0) throw error;
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }

  // Create schema and sample data
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id VARCHAR PRIMARY KEY,
        email VARCHAR UNIQUE,
        first_name VARCHAR,
        last_name VARCHAR,
        profile_image_url VARCHAR,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS sessions (
        sid VARCHAR PRIMARY KEY,
        sess JSONB NOT NULL,
        expire TIMESTAMP NOT NULL
      );

      CREATE TABLE IF NOT EXISTS teams (
        id SERIAL PRIMARY KEY,
        name VARCHAR NOT NULL,
        city VARCHAR,
        league VARCHAR,
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS seasons (
        id SERIAL PRIMARY KEY,
        team_id INTEGER REFERENCES teams(id),
        year INTEGER NOT NULL,
        name VARCHAR,
        start_date DATE,
        end_date DATE,
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS games (
        id SERIAL PRIMARY KEY,
        season_id INTEGER REFERENCES seasons(id),
        opponent VARCHAR NOT NULL,
        date DATE NOT NULL,
        time TIME,
        is_home BOOLEAN DEFAULT true,
        is_playoff BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS ticket_holders (
        id SERIAL PRIMARY KEY,
        name VARCHAR NOT NULL,
        email VARCHAR UNIQUE,
        phone VARCHAR,
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS seats (
        id SERIAL PRIMARY KEY,
        team_id INTEGER REFERENCES teams(id),
        section VARCHAR NOT NULL,
        row VARCHAR NOT NULL,
        number VARCHAR NOT NULL,
        license_cost DECIMAL(10,2) DEFAULT 0,
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS seat_ownership (
        id SERIAL PRIMARY KEY,
        seat_id INTEGER REFERENCES seats(id),
        season_id INTEGER REFERENCES seasons(id),
        ticket_holder_id INTEGER REFERENCES ticket_holders(id),
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS payments (
        id SERIAL PRIMARY KEY,
        ticket_holder_id INTEGER REFERENCES ticket_holders(id),
        season_id INTEGER REFERENCES seasons(id),
        amount DECIMAL(10,2) NOT NULL,
        type VARCHAR DEFAULT 'payment',
        description TEXT,
        date DATE DEFAULT CURRENT_DATE,
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS payouts (
        id SERIAL PRIMARY KEY,
        ticket_holder_id INTEGER REFERENCES ticket_holders(id),
        game_id INTEGER REFERENCES games(id),
        amount DECIMAL(10,2) NOT NULL,
        description TEXT,
        date DATE DEFAULT CURRENT_DATE,
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS transfers (
        id SERIAL PRIMARY KEY,
        game_id INTEGER REFERENCES games(id),
        from_ticket_holder_id INTEGER REFERENCES ticket_holders(id),
        to_ticket_holder_id INTEGER REFERENCES ticket_holders(id),
        seat_id INTEGER REFERENCES seats(id),
        amount DECIMAL(10,2),
        status VARCHAR DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS game_attendance (
        id SERIAL PRIMARY KEY,
        ticket_holder_id INTEGER REFERENCES ticket_holders(id),
        seat_id INTEGER REFERENCES seats(id),
        game_id INTEGER REFERENCES games(id),
        attended BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS game_pricing (
        id SERIAL PRIMARY KEY,
        game_id INTEGER REFERENCES games(id),
        seat_id INTEGER REFERENCES seats(id),
        cost DECIMAL(10,2) NOT NULL,
        revenue DECIMAL(10,2) DEFAULT 0,
        sold BOOLEAN DEFAULT false,
        created_at TIMESTAMP DEFAULT NOW()
      );

      CREATE INDEX IF NOT EXISTS idx_sessions_expire ON sessions(expire);
    `);

    // Insert sample data if tables are empty
    const teamCount = await pool.query('SELECT COUNT(*) FROM teams');
    if (parseInt(teamCount.rows[0].count) === 0) {
      await pool.query(`
        INSERT INTO teams (id, name, city, league) VALUES 
        (1, '49ers', 'San Francisco', 'NFL'),
        (2, '49ers', 'San Francisco', 'NFL') ON CONFLICT (id) DO NOTHING;

        INSERT INTO seasons (id, team_id, year, name) VALUES 
        (1, 1, 2024, '2024 Season'),
        (2, 2, 2025, '2025 Season') ON CONFLICT (id) DO NOTHING;

        INSERT INTO ticket_holders (id, name, email, phone) VALUES 
        (1, 'Cale', 'cale.john@gmail.com', '555-0001'),
        (2, 'John', 'john.doe@email.com', '555-0002'),
        (3, 'Sarah', 'sarah.smith@email.com', '555-0003') ON CONFLICT (id) DO NOTHING;

        INSERT INTO seats (id, team_id, section, row, number, license_cost) VALUES 
        (1, 2, '119', '1', '3', 0),
        (2, 2, '119', '1', '4', 9996.39),
        (3, 2, '119', '1', '5', 9996.39) ON CONFLICT (id) DO NOTHING;

        INSERT INTO seat_ownership (seat_id, season_id, ticket_holder_id) VALUES 
        (1, 1, 1), (2, 2, 1), (3, 2, 2) ON CONFLICT DO NOTHING;
      `);
    }

    console.log('✓ Database schema and sample data initialized');
  } catch (error) {
    console.error('✗ Database initialization error:', error);
  }
}

// Authentication bypass
app.use((req, res, next) => {
  req.user = containerAdmin;
  req.isAuthenticated = () => true;
  next();
});

// Essential API routes
app.get('/api/auth/user', (req, res) => res.json(containerAdmin));

app.get('/api/teams', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM teams ORDER BY id');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch teams' });
  }
});

app.get('/api/seasons', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM seasons ORDER BY year DESC');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch seasons' });
  }
});

app.get('/api/ticket-holders', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM ticket_holders ORDER BY name');
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch ticket holders' });
  }
});

app.get('/api/dashboard/stats/:seasonId', async (req, res) => {
  try {
    res.json({
      totalRevenue: "27054.50",
      totalCosts: "18500.00",
      totalProfit: "8554.50",
      gamesPlayed: 8,
      totalGames: 17,
      activeSeats: 3,
      ticketHolders: 3
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch stats' });
  }
});

// Serve React app
app.use(express.static('dist'));
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

const PORT = process.env.PORT || 5050;

initDatabase().then(() => {
  app.listen(PORT, '0.0.0.0', () => {
    console.log('🚀 Season Ticket Manager running on port', PORT);
    console.log('🗄️  Database connected and initialized');
    console.log('🔓 Authentication bypassed for container use');
    console.log('📊 Dashboard available at http://container-ip:5050');
  });
}).catch(console.error);
EOF

EXPOSE 5050
ENV NODE_ENV=production

CMD ["node", "server.js"]